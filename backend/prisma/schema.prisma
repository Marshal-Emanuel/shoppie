generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlserver"
  url      = env("DATABASE_URL")
}

model User {
  id          String      @id @unique
  email       String      @unique
  name        String
  phoneNumber String      @unique
  country     String
  password    String
  role        String      @default("user")
  Review      Review[]
  Order       Order[]
  Favorites   Favorites[]
  Cart        Cart[]
}

model DeletedUser {
  id          String @id @unique
  email       String @unique
  name        String
  phoneNumber String @unique
  country     String
  password    String
  role        String @default("user")
}

model Product {
  id          String      @id @unique
  name        String
  price       Float
  description String      @db.VarChar(8000)
  type        String
  size        String
  quantity    Int
  stockLimit  Int
  images      String      @db.VarChar(MAX)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @default(now()) @updatedAt
  Order       Order[]
  Review      Review[]
  Favorites   Favorites[]
  Cart        Cart[]
}

model DeletedProduct {
  id          String   @id @unique
  name        String
  price       Float
  description String   @db.VarChar(8000)
  type        String
  size        String
  quantity    Int
  stockLimit  Int
  images      String   @db.VarChar(MAX)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}

model Review {
  id        String   @id @unique
  productId String
  userId    String
  orderId   String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  user      User     @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  order     Order    @relation(fields: [orderId], references: [id], onUpdate: NoAction, onDelete: NoAction)
}

model DeletedReview {
  id        String   @id @unique
  productId String
  userId    String
  orderId   String
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Order {
  id               String   @id @unique
  productId        String
  userId           String
  productNumber    Int
  isOrderCompleted Boolean  @default(false)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @default(now()) @updatedAt
  Review           Review[]
  product          Product  @relation(fields: [productId], references: [id])
  user             User     @relation(fields: [userId], references: [id])
}

model Cart {
  id            String   @id @unique
  productId     String
  userId        String
  productNumber Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt
  product       Product  @relation(fields: [productId], references: [id])
  user          User     @relation(fields: [userId], references: [id])
}

model Favorites {
  id        String   @id @unique
  productId String
  userId    String
  createdAt DateTime @default(now())
  product   Product  @relation(fields: [productId], references: [id], onUpdate: NoAction, onDelete: NoAction)
  user      User     @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)
}
